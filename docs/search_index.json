[["methods.html", "Chapter 4 Methods 4.1 Overview 4.2 Creating and Setting up the Test Scenario 4.3 Improved Mode Choice in BEAM 4.4 Data Validation and Calibration 4.5 Path, Person, and Location Analysis 4.6 Summary", " Chapter 4 Methods 4.1 Overview A systematic approach to determine the effects of a consistent mode choice model between an activity-based model and a microsimulation tool requires four two main steps. The first step involves creating a test scenario that runs within the activity-based model ActivitySim and the microsimulation tool BEAM. Section 4.2 explains this step including how the test scenario was created and how ActivitySim and BEAM were configured. The second step involves adjusting the internal code of BEAM to align the mode choice model with that of ActivitySims. Section 4.3 explains the details behind the changes made to BEAMs default mode choice model to align more closely with that of ActivitySims. The third step is to calibrate the mode choice utility values within BEAM. Section 4.4 explains the details behind the calibration of the mode choice parameters. The last step is to compare the modal distributions between different mode choice models, which is explained in Section 4.5. 4.2 Creating and Setting up the Test Scenario Designing a test scenario to use within ActivitySim and BEAM was essential to understanding and testing mode choice between models. This section explains the region that was used to model the test scenario. This section also explains how the input files needed to run both ActivitySim and BEAM were generated for the test scenario. 4.2.1 Test Scenario Region The test scenario used in this research includes the approximate 2.5 million agents of the Salt Lake City, Utah, USA region. This region includes the Box Elder, Davis, Salt Lake, Utah, and Weber counties. Figure 4.1 shows the 2881 Traffic Analysis Zones (TAZs) along with the five counties that make up the region of study. Figure 4.1: The TAZs of each county in the region of study. This extensive region was selected for the following reasons: There is substantial data that exists for this region. Having sufficient data points for each of the TAZs was essential to creating the inputs to ActivitySim and BEAM. The majority of the data used for this research was gathered and shared by Wasatch Front Regional Council (WFRC), the Metropolitan Planning Organization (MPO) of Salt Lake county. There currently exists a need to analyze this region with a microsimulation tool, such as BEAM. Specifically, the Utah Transit Authority (UTA) wishes to understand what specific sub regions in the Salk Lake area will best serve new on-demand transit vehicles. In some future research, this specific question will be answered. Along this this question, having a microsimulation model of a region will prove to be an effective method to answering multiple transportation service questions in the future. To date, only one previous analysis of this region has been conducted with the BEAM software (Lant 2021). The size and population within the study area are comparable to other regions around the United States. This means that the work completed in this research may be useful to other cities besides Salt Lake City. The project researchers live in this region, and therefore have real life knowledge of how transportation works in the region. This allows the researchers to compare the the results of the models with their own experiences, hopefully providing extra verification. Overall, the Salt Lake City, Utah region proved to be an effective location for this mode choice analysis research. After selecting the region of study, the next steps involved seting up and running ActivitySim. 4.2.2 Setting up and Running ActivitySim Setting up and running ActivitySim for the Salt Lake region was an arduous task. The entire process for setting up the activity-based model for this region is explained in the research done by Lant (2021). The research done by Lant (2021) was the basis to the work completed in this project. However, a brief explanation of the setup of the activity-based model is explained in Section 4.2.2.1. The two main steps behind creating an activity-based mode for the Salt Lake region was creating corresponding input files and calibrating and validating the results. 4.2.2.1 Creating Input Files ActivitySim requires the following three input files in order to run: A synthetic population of the agents within the study area. A zonal socioeconomic data file describing the characteristics of each zone. A set of skims that describe the cost and travel times of all modes between all zones. The synthetic population is used to generate an entire population with specific individual details for each agent (like gender, age, income, vehicle ownership). Gathering individual information for all the agents in the region may be considered an invasion of privacy. So instead a synthetic population is used. The synthetic population is a generated population with specific individual attributes that add up to the regional characteristics as a whole. The synthetic population was generated using a software called PopulationSim (PopulationSim 2021). To run PopulationSim a seed table and a set of targets were used. The seed table represented information about a subset of the population and the set of targets represented demographic data for smaller areas within the region (Lant 2021). Together, PopulationSim was able to simulate individual attributes for the approximate 2.5 million agents in the Salt Lake region. The zonal socioeconomic data file stores zonal characteristics regarding household information, worker information, and other activity type information. This file specifically gives information on what types and how many types of activities may be found within a certain zonal region. This file was created using data from WFRC, Utah Automated Geographic Reference Center (AGRC 2021), and the synthetic population when necessary. The third input to ActivitySim is detailed travel skims. Skims are large matrices showing travel times and costs between every set of zones within the area of study. Included in these skims were further details regarding differences in modes, distances, wait times, etc. (Lant 2021). The existing skims from WFRC were used along with some slight adjustments to fit the ActivitySim model. 4.2.2.2 Calibration and Validation The calibration and validation of ActivitySim was conducted by Lant (2021). The purpose of the calibration and validation was to ensure the outputs generated by ActivitySim matched target regional values. Specifically trip productions, trip distributions, and mode choices were tested to match the given target values from WFRCs four-step model. To validate the trip productions, total trips per county were compared between ActivitySim and WFRC target values. These trips were close to identical, with only a variation of 1.0 percent. The trip distributions were compared as well, with about a 4.0 percent margin of error. Overall, Lant (2021) shows that the trip productions and distributions of the ActivitySim model were a good representation of travel behavior, requiring no calibration. The mode choice validation was difficult as the mode choice categories between WFRC and ActivitySim are vastly different. ActivitySim considers five trip mode choice alternatives whereas the WFRC model considers 10 trip mode choice alternatives. However, ActivitySim does include 10 tour mode choice alternatives. When comparing mode choice distributions, both the trip and tour distributions from ActivitySim were compared with the trip distributions of WFRC. Lant (2021) performs an in depth comparison between these values and found that ActivitySim underrepresents non-motorized university trips and overrepresents non-motorized work trips. In addition ActivitySim underrepresents shared ride trips for all tour purposes and does not accurately represent commuter rail and local bus trips for all tour purposes. overall, the mode choice model did not match closely with the WFRC targets, and required further calibration. Lant (2021) performed an in depth calibration across ActivitySim modes to minimize error with the WFRC target shares. The calibration process will not be explained in this research paper however. Upon calibration, trip productions and distributions remained relatively unchanged, and therefore needed no calibration. Mode choice distributions were closer to target values as well. Overall, after some calibration the results of ActivitySim produced sufficiently accurate information to move forward with the research. 4.2.3 Setting up BEAM After setting up, calibrating, and running the ActivitySim scenario for the Salt Lake region, the next step was setting up BEAM using the results of the ActivitySim model. BEAM requires a variety of input files, most of which are as follows: A person population and corresponding person attributes files. A household population with household attributes file and a vehicle fleet file. Vehicle types files explaining different person vehicle types, public transit vehicle types, and ride hailing vehicle information. Transportation services including a mapable street network and a file including General Transit Feed Specification (GTFS) transit information. Other minor input files. The BEAM input files were directly creating using the generate_beam_plans.py python script ActivitySim add on. This script was developed by the developers at Lawrence Berkeley National Lab, and allows easy csv formatted input files to BEAM. The details behind these input files along with example tables of these files are discussed and shown in the following subsections. 4.2.3.1 Population File The population file was created from the ActivitySim generated data. ActivitySims main purpose is to generate daily activity patterns (DAPs) for each agent from the synthetic population. The DAPs generated by ActivitySim consists of all the activities that each agent within the population embark on during the day. Using the activity types, activity locations, activity durations, mode choices, departure and arrival times, and overall activity data, BEAM generated a population file along with a person attributes file. The population file generated by the BEAM ActivitySim add-on code created a csv file describing all the events and choices each agent embarks on during the plan. For example, the plans file defines each agents home location, their activity locations, their travel and activity times, their mode choices for each trip, etc. A subsection of this file is shown in Table 4.1 to provide an example of some of its contents. Table 4.1: A Subset of the Population Plans ID Mode Type End Time Purpose Household ID LocaitonX LocaitonY 50 NA Home 25668.0 escort 6 412577.3 4606340 50 hov3 NA NA escort 6 NA NA 50 NA escort 28170.0 escort 6 413589.0 4593487 50 hov3 NA NA escort 6 NA NA 50 NA home NA escort 6 412577.3 4606340 51 NA Home 36079.2 work 6 412092.6 4606274 51 car NA NA work 6 NA NA 51 NA escort 38109.6 work 6 418892.5 4567448 51 car NA NA work 6 NA NA 51 NA work 64998.0 work 6 424344.6 4537656 51 car NA NA work 6 NA NA 51 NA escort 70578.0 work 6 409491.7 4552587 51 car NA NA work 6 NA NA 51 NA home NA work 6 412092.6 4606274 52 NA Home 67010.4 othdiscr 6 412437.5 4606445 The person attributes file describes individual characteristics such as income, gender, age, vehicle ownership, etc. A subsection of this file is shown in Table 4.2 to provide an example of some of its contents. Table 4.2: A Subset of the Person Attributes File ID Household ID Age Sex VOT TAZ Income Household Size Auto Work Ratio 50 6 50 2 9.518956 9 103337.40 10 auto_sufficient 51 6 56 1 9.518956 9 103337.40 10 auto_sufficient 52 6 35 2 9.518956 9 103337.40 10 auto_sufficient 53 6 23 2 9.518956 9 103337.40 10 auto_sufficient 54 6 15 2 6.349144 9 103337.40 10 auto_sufficient 55 6 11 1 6.349144 9 103337.40 10 auto_sufficient 56 6 5 1 6.349144 9 103337.40 10 auto_sufficient 57 6 2 1 6.349144 9 103337.40 10 auto_sufficient 58 6 1 1 6.349144 9 103337.40 10 auto_sufficient 59 6 43 1 9.518956 9 103337.40 10 auto_sufficient 599 58 71 1 8.431196 5 52461.37 9 auto_sufficient 600 58 63 2 8.431196 5 52461.37 9 auto_sufficient 601 58 35 2 8.431196 5 52461.37 9 auto_sufficient 602 58 23 2 8.431196 5 52461.37 9 auto_sufficient 603 58 16 1 5.623608 5 52461.37 9 auto_sufficient 4.2.3.2 Household and Vehicle Files The household and vehicle files were generated using the same code to generate the population files. ActivitySim generates three specific files: a households, persons, and trips file. The persons and trips files were used to construct the population plans file. The households file, however, was used to generate both the household and vehicle BEAM input files. Within the BEAM households file, information such as household income, vehicle ownership, and the IDs of the agents and vehicles that correspond to each household ID is provided. Unfortunately, ActivitySim does not generate household coordinate locations, but does provide the TAZ in which the house presides. Therefore, the generate_beam_plans.py code designed by the BEAM developers assigns a random coordinate within the TAZ to each house. This household coordinate is then used to simulate starting and ending locations for each agent within their population plans file. An example of a subset of the households file that is used as an input to BEAM is shown in Table 4.3. Table 4.3: A Subset of the Households File Household ID TAZ Income Household Size LocationX LocationY Auto Work Ratio 304379 1281 37362.029 8 419080.7 4498686 auto_sufficient 270209 1104 163050.420 4 426367.4 4506262 auto_sufficient 68811 555 17291.518 3 428645.4 4524432 auto_sufficient 83245 553 35756.388 2 426902.8 4523207 no_auto 373813 1516 54036.582 2 430560.8 4491969 auto_sufficient 574302 341 68375.208 4 418986.0 4559249 no_auto 253735 1197 192125.910 2 431933.2 4504105 auto_sufficient 53111 473 21239.420 2 420837.4 4542079 auto_sufficient 366644 1481 13778.640 2 429353.8 4494406 no_auto 101334 666 9777.942 2 422532.8 4514347 auto_sufficient The vehicles file is quite simple in that it only includes information on the vehicle ID, vehicle type, and the household the vehicle belongs to. An example of a subset of the vehicles file that is used as an input to BEAM is shown in Table 4.4. Table 4.4: A Subset of the Vehicles File Vehicle ID Vehicle Type Household ID 1 CAR 6 2 CAR 6 3 CAR 6 4 CAR 6 5 CAR 30 6 CAR 30 7 CAR 30 8 CAR 30 4.2.3.3 Vechile Types Files In addition to the household and vehicle files, two vehicle type files are also needed to run BEAM. The first describes attributes that relate to each vehicle type. For example, some attributes that are included in the vehicle types file is the fuel efficiency, seating capacity, vehicle length, etc. An example of a subset of the vehicle types file that is used as an input to BEAM is shown in Table 4.5. Table 4.5: A Subset of the Vehicle Types Input File ID Seats Standing Room Length (m) Fuel Vehicle Type BODY-TYPE-DEFAULT 0 0 0.5 Food Body BIKE-DEFAULT 2 0 1.5 gasoline Bike FAST-BIKE 2 0 1.5 gasoline Bike Car 4 0 4.5 gasoline Car CAR 4 0 4.5 gasoline Car Car-rh-only 4 0 4.5 gasoline Car WAV 6 0 4.5 gasoline Car CAV 4 0 4.5 gasoline Car BEV 4 0 4.5 electricity Car PHEV 4 0 4.5 electricity Car BUS-DEFAULT 37 20 12.1 diesel MediumDutyPassenger RAIL-DEFAULT 801 2052 129.6 diesel MediumDutyPassenger FERRY-DEFAULT 149 0 26.0 diesel MediumDutyPassenger SUBWAY-DEFAULT 336 864 129.6 electricity MediumDutyPassenger CABLE_CAR-DEFAULT 29 31 8.4 electricity MediumDutyPassenger TRAM-DEFAULT 58 19 14.0 electricity MediumDutyPassenger A secondary vehicle types file exists that describes the nature of the ride hail fleet. One particular advantage to the microsimulation tool BEAM is its ability to model on-demand transit vehicles in a realistic manner. Part of creating realistic ride-hailing services is using an input file describing the nature of the fleet of ride-hail vehicles. An example of a subset of the ride-hail vehicle attributes file that is used as an input to BEAM is shown in Table 4.6. For this research project, the ride-hail file used was taken from an example BEAM scenario. In the future however, a ride hailing fleet file that accurately depicts the nature of ride hail vehicles in the Salt Lake region will be used. For this research it was not necessary to include, and so a default file was used instead. Table 4.6: A Subset of the Vehicle Types Input File ID Vehicle Type Starting Point X Starting Point Y Shift Times rideHailVehicle-033000 Car 414692.0 4498566 {10:25200} rideHailVehicle-012301 Car 418969.2 4495377 {10:25200} rideHailVehicle-035201 Car 422864.0 4527397 {10:25200} rideHailVehicle-031400 Car 430458.0 4508789 {10:25200} rideHailVehicle-030800 Car 417063.9 4568028 {10:25200} rideHailVehicle-016300 Car 415844.3 4544000 {10:25200} rideHailVehicle-033100 Car 408380.1 4550982 {10:25200} rideHailVehicle-061500 Car 436159.1 4474228 {10:25200} rideHailVehicle-032601 Car 420785.5 4484536 {10:25200} rideHailVehicle-015500 Car 444235.6 4452609 {10:25200} rideHailVehicle-016400 Car 410876.3 4506167 {10:25200} rideHailVehicle-061400 Car 414579.1 4485811 {10:25200} rideHailVehicle-017601 Car 411338.4 4548806 {10:25200} rideHailVehicle-020700 Car 446697.0 4437390 {10:25200} rideHailVehicle-010500 Car 425560.0 4483818 {10:25200} 4.2.3.4 Transportation Services BEAM requires two main files in order to provide transportation services to agents within the simulation. These two files are a GTFS file and a routeable transportation network. GTFS data is a common format that houses information relating to transportation schedules and transportation locations. Many public agencies publish transportation data in the GTFS format. The GTFS data used as the input to BEAM was obtained from UTAs mobility data feed from 2019 (UTA 2021). BEAM maps the GTFS data onto the highway network allowing agents to use both transportation and highway services interchangeably (Lant 2021). A detailed routeable road network for the study area was obtained from WFRCs travel demand model. After some manipulation, the network was cleaned of misconnections and filtered to include the correct attributes. Within the network, various attributes such as capacity, free flow speed, number of lanes, functional classification, direction, whether it is a one-way street, etc. were included. The network was constructed from a series of link and node combinations. The nodes represent intersections and activity locations whereas the links represent the roadways that connect each node. The links include the attributes of the network whereas the nodes include the coordinates. A detailed highway network of links and nodes allows BEAM to simulate traffic conditions in a more realistic manner. Figure 4.2 displays the roadway network of the region of study. Figure 4.3 displays a close up of roadway network system within Salt Lake City, Utah to show significant detail. Figure 4.2: Transportation network for area of study. Figure 4.3: Close up of the transportation network of Salt Lake City. 4.2.3.5 Other Input Files A variety of additional input files can be included to run the BEAM simulation. Not all the files will be mentioned, but a few of them include a configuration file, a parking file, a toll prices file, TAZ specific files, and mode choice utility parameter files. Besides for the mode choice utility parameter files, details about these additional files will not be provided. The details behind the mode choice utility parameter file will be discussed in Section 4.3. 4.3 Improved Mode Choice in BEAM After creating the basic input files in order to run BEAM for the Salt Lake region, the next step was adjusting the mode choice model within BEAM itself. As discussed in Section 3.8 BEAMs default mode choice model is a simple multinomial logit model calculated with minimal travel attributes. In Section 3.5 it is discussed that ActivitySims mode choice model is comprehensive. Changing the mode choice model within BEAM to become more consistent with that of ActivitySims required some major adjustments to BEAMs internal code. Specifically, in this research BEAMs code was changed in three significant ways. Section 4.3.1 describes how choices were changed to be made using activity purpose values, Section 4.3.2 describes how additional attributes were inserted to the utility equation, and Section 4.3.3 describes how new modal alternatives were added to BEAM. Then, in Section4.3.4 algorithms explaining BEAMs improved mode choice model is presented. 4.3.1 Purpose-based Decisions The first major addition to BEAMs mode choice model to improve consistency with ActivitySim was to base mode choice decisions off of activity purposes. An activity purpose describes the primary activity of trips on a tour. Primary purposes are selected on a tour-based level. For this reason, the primary purpose is also referred to as the tour purpose. For example, if an agent were to go to the gym, then to work, and then return home, each trip on the work tour would have a primary purpose of work. In this paper, tour purpose, primary purpose, activity purpose, and tour type are all used interchangeable to mean the same thing. ActivitySims mode choice coefficients vary between ten different tour purposes. These tour purposes are as follows: Work University School Escort Shopping Eating Out Social Other Maintenance Other Discretionary At Work To ensure the ability to distinguish between tour purpose values, it was necessary to adjust the population plans file to include a tour purpose trip-level attribute. Since ActivitySim bases decisions on activity purpose, it was simple to attach the attribute to the BEAM input plans file. As shown in Table 4.1 a purpose attribute exists. After assigning this attribute to the plans, the next step was adjusting the BEAM code to read in a new attribute. By adjusting BEAMs CSV scenario reader script, along with other scripts relating to reading inputs, the primary purpose was able to be read into the BEAM software. Once primary purpose values were present in the population plans, the next step was to design a new mode choice model within BEAM. In order to better understand the new code that was inserted into BEAM, three flow charts were constructed (See Figure 4.4, Figure 4.5, and Figure 4.6). In these flow charts inputs are displayed as folder icons, Java classes and methods are displayed as rectangles, and the result is displayed as an oval. These flow charts help display the code behind the BEAMs mode choice models. Understanding BEAMs default mode choice model and its obsolete Latent Class Choice Model (LCCM) are useful toward understanding how the new Tour Purpose Choice Model (TPCM) was constructed in the BEAM code. 4.3.1.1 Multinomial Logit Choice Model Figure 4.4 shows the process behind BEAMs default mode choice model. As described in Section 3.8, by default BEAM calculates mode choices using a multinomial logit function with only a few attribute variables. In Figure 4.4 the flow of inputs and BEAM functions are shown. As shown, the inputs to the Mode Choice Calculator are the alternatives, person and household attributes, and the destination activity data. Figure 4.4: BEAM code flow chart behind the default multinomial logit choice model. The alternatives input represents a set of detailed travel itineraries that the agent can choose from. Within the alternatives variable, travel statistics, travel paths, travel modes, travel times, etc. are included. So as a result, the alternatives variable represents the modes in which the agent can choose from, while also including all the travel statistics needed to calculate the probability of selecting such mode. The next input is the person and household attributes variable. This variable includes all the information from the person attributes input file (See Table 4.2) and the household attributes file (See Table 4.3). Within the household attributes file some information from the vehicle inputs file is also included. The person and household attributes variable is also needed to calculate the probability of selecting such a mode. The last input is the destination activity data. This data simply includes addition information relating to the current trip and the destination activity. It is also useful to calculating the final mode choice. The alternatives, person and household attributes, and destination activity are fed into the Mode Choice Calculator Java class. The purpose of this class is to organize the mode choice input data and organize it into a manner in which the choice model can process it efficiently. The Mode Choice Calculator class also houses some useful functions in the code used to calculate generalized travel time and the all day utility value. The organized data from the Mode Choice Calculator along with the multinomial logit utility parameters are then sent to the multinomial logit choice model. The utility parameters in the default BEAM code are simply expressed in the configuration file. For each mode, an intercept, transit occupancy level, and transfer intercept/multiplier is specified. Then, within the multinomial logit choice model the utility value is calculated for each modal alternative. Those utility values are then sampled and one final mode is chosen! 4.3.1.2 Latent Class Choice Model BEAM has an obsolete LCCM within its code structure. When BEAM was first being developed, the LCCM was how modal decisions were made. Part of creating the new Tour Purpose Choice Model was first to recreate and reboot the LCCM and second to change its structure slightly to base decisions off of tour purpose. For this reason, the structure behind the LCCM is presented. Figure 4.5 shows the flow of code for the LCCM. Figure 4.5: BEAM code flow chart behind the latent class choice model. Just like with the multinomial logit choice model, the same alternatives, person and household attributes, and destination activity inputs are fed into the mode choice calculator. The mode choice calculator then acts in a similar way to organize the data for further analysis. However, an additional step is taken where the information is sent to a Latent Class Choice Model Java class before it is sent to the Multinomial Logit Java class. Within the Latent Class Choice Model Java class, a few things happen. First, the LCCM Utility Parameters data file is read into the code and parsed. After parsing the data, the utility parameters are attached to each alternative and stored. The LCCM Utility Parameters file includes mode choice coefficients relating to number of cars, household size, income, cost, time, and also alternative specific constants. The interesting part to the LCCM is that it calculates modes based off of which modality style a particular agent is a part of. The modality style represents the travel behavior of the individual. The LCCM code divides individuals up into one of the six groups or classes based on their modality style travel behavior. The LCCM BEAM code provides two incredibly useful structures that are directly related to creating the TPCM. First, it provides a code structure that reads in a csv file storing specific and attribute related utility parameters. Second, it provides a code structure for storing these utility parameters into each alternative based on person/household attributes, travel statistics, and destination activity. Interestingly enough, after the Latent Class Choice Model Java class reads in the utility information and stores it accordingly, it is sent to the same Multinomial Logit Java class. The overall utility value is calculated for each alternative and then are sampled down to a final mode choice! 4.3.1.3 Tour Purpose Choice Model As mentioned previously, the TPCM was constructed off of the LCCM within BEAM. This means the first step to creating this model was fixing the LCCM and making the LCCM run correctly. With a few minal code adjustments, and a lot of debugging, the LCCM was brought back to life. The final flow of code for the TPCM is presented in Figure 4.6. Figure 4.6: BEAM code flow chart behind the tour purpose choice model. The flow chart shows a very similar choice process as the LCCM, except that an additional input is sent to the Mode Choice Calculator. Obviously, the tour purpose value is necessary for the choice model and is therefore also sent to the Mode Choice Calculator. This input is only available, however, because it was attached to the population plans as explained previously. In order to create the TPCM, two main steps were taken. First, a Tour Purpose Choice Model Java class was developed, mimicking how the code worked within the Latent Class Choice Model Java class. The TPCM was much more advanced than the LCCM, however, because instead of six classes to choose from there were 10 activity purposes to choose from. In addition, instead of only needing a few travel statistics to do the mode choice, the TPCM included 25 different path, person, and location type variables. The second step toward creating the TPCM was to develop an input csv file that included all the utility parameter values from ActivitySim. These additional attributes used in the utility equation are discussed in Section 4.3.2. Overall, the Tour Purpose Choice Model Java class performed similarly to the Latent Class Choice Model Java class. It was able to parse the input utility parameters, attach those values to the alternatives, as well as calculate the travel statistics for all 25 travel variables. To do this, an additional class was built to calculate each of the travel variables. The final mode choice was determined in the same manner as well. These alternatives were sent to the Multinomial Logit Java class where their modal utilities were calculated and sampled. The sampling then determined a final mode choice for each individual. 4.3.2 Additional Attributes in Utility Equation Equally important to developing the tour purpose choice model code structure within BEAM was to develop a consistent mode choice utility function. As explained in Section 3.5 ActivitySim bases its mode choice off of an abundance of path, person, and location type variables. Therefore, most of these path, person, and location type variables were inserted into the BEAM structure and used to calculate mode choice. The travel statistics for each variable were calculated within the TPCM code and the coefficient and intercept values were included using a csv input file. The specific values for the coefficients used in the csv input file were taken from MTC (2012). Below, a list of the path, person, and location variables used to calculate the modal utility is shown. Path Variables: Number of Transfers, Vehicle Time, Egress Time, Wait Time, Origin to Transit Proximity, Destination to Transit Proximity, Walking Distance, Biking Distance, and Driving Distance Person Variables: Cost, Age, Household Size, and Vehicle to Worker Ratio Location Variables: Zonal Destination Index and Central Business District In addition, Table 4.7 shows a subsection of this input file with only the cost variable coefficients provided. The purpose of showing this table is to help understand how extensive the choice model was. Within the table is is clear to see that variation exists between tour purpose, modal alternative, and variable type. Only three modal alternatives are provided in the table. Table 4.7: Cost coefficient values for some modes from the utility parameters csv file Variable Type Variable Alternative Units Tour Purpose Value Person cost car util/min work -0.026 Person cost car util/min univ -0.044 Person cost car util/min school -0.044 Person cost car util/min escort -0.036 Person cost car util/min shopping -0.036 Person cost car util/min eatout -0.036 Person cost car util/min othmaint -0.036 Person cost car util/min social -0.036 Person cost car util/min othdiscr -0.036 Person cost car util/min atwork -0.038 Person cost ride_hail util/min work -0.026 Person cost ride_hail util/min univ -0.044 Person cost ride_hail util/min school -0.044 Person cost ride_hail util/min escort -0.036 Person cost ride_hail util/min shopping -0.036 Person cost ride_hail util/min eatout -0.036 Person cost ride_hail util/min othmaint -0.036 Person cost ride_hail util/min social -0.036 Person cost ride_hail util/min othdiscr -0.036 Person cost ride_hail util/min atwork -0.038 Person cost walk_transit util/min work -0.026 Person cost walk_transit util/min univ -0.044 Person cost walk_transit util/min school -0.044 Person cost walk_transit util/min escort -0.036 Person cost walk_transit util/min shopping -0.036 Person cost walk_transit util/min eatout -0.036 Person cost walk_transit util/min othmaint -0.036 Person cost walk_transit util/min social -0.036 Person cost walk_transit util/min othdiscr -0.036 Person cost walk_transit util/min atwork -0.038 The observable utility equation for the new tour purpose choice model can be divided up into three sub-equations. Equation (4.1) shows the Path type variable part of the TPCM utility equation. Equation (4.2) shows the Person type variable part of the TPCM utility equation. Equation (4.3) shows the Location type variable part of the the TPCM utility equation. The full TPCM utility equation, however, is the combination of path, person, and location type variables, as displayed in Equation (4.4). 4.3.2.1 Path Type Utility Equation \\[\\begin{equation} V_j = \\beta_{t_v}(t_v) + \\beta_{t_w}(t_w) + \\beta_{t_e}(t_e) + \\beta_{tr_p}(tr_p) + \\beta_{xfer}(xfer) + \\beta_{w_{dis}}(w_{dis}) + \\\\ \\beta_{b_{dis}}(b_{dis}) + \\beta_{d_{dis}}(d_{dis}) \\tag{4.1} \\end{equation}\\] where \\(j\\) is the modal alternative, \\(t_v\\) is the in vehicle travel time (mins), \\(t_w\\) is the wait time (mins), \\(t_e\\) is the egress time (mins), \\(tr_p\\) is the proximity to transit (miles), \\(xfer\\) is the number of transfers, \\(w_{dis}\\) is the walk distance (miles), \\(b_{dis}\\) is the bike distance (miles), \\(d_{dis}\\) is the drive distance (miles), \\(\\beta_{tr_p}\\) differs between origin/destination and length, and \\(\\beta_{w_{dis}}\\), \\(\\beta_{b_{dis}}\\), and \\(\\beta_{d_{dis}}\\) differ between lengths. Note: All \\(\\beta\\) values differ between mode and tour purpose. 4.3.2.2 Person Type Utility Equation \\[\\begin{equation} V_j = ASC_{auto} + \\beta_{c}(c) + \\beta_{ag}(ag) \\tag{4.2} \\end{equation}\\] where \\(j\\) is the modal alternative, \\(ASC_{auto}\\) is the alternative specific constant that differs between modal alternative and auto ownership dependency, \\(c\\) is the cost, and \\(ag\\) is the age grouping (if the person is between 0-10 or 16-19 years old). Note: All \\(\\beta\\) values differ between mode and tour purpose. 4.3.2.3 Location Type Utility Equation \\[\\begin{equation} V_j = \\beta_{zdi}(zdi) + \\beta_{cbd}(cbd) \\tag{4.3} \\end{equation}\\] where \\(j\\) is the modal alternative \\(zdi\\) is the zonal density index, \\(cbd\\) is a classifier for zones labeled as central business district, and \\(\\beta_{zdi}\\) differs between origin/destination. Note: All \\(\\beta\\) values differ between mode and tour purpose. 4.3.2.4 BEAMs New Consistent Utility Equation \\[\\begin{equation} V_j = Eq:2 + Eq:3 + Eq:4 \\tag{4.4} \\end{equation}\\] where \\(j\\) is the modal alternative. When comparing Equation (4.4) with BEAMs default equation in Equation (??), it is clear that multiple more travel variables are used to calculate the utility value. When comparing this Equation (4.4) with the ActivitySim equations in Section 3.5, most of the same variable are used. By using most of the path, person, and location type variables to calculate the mode choice, the TPCM calculates utility in a consistent manner with ActivitySim. In addition, all utility values differ by tour purpose, making it almost identical to ActivitySims trip-based mode choice. It is important to note that BEAMs TPCM was based heavily on ActivitySims trip-based mode choice model. BEAMs internal code is built on a trip-based level. It would have been outside the scope of this project to adjust BEAMs structure to include a tour mode choice model. As a result, the mode choice consistency only exists on the trip-based mode choice level. Hopefully, in the future a consistent tour-based mode choice can be inserted into BEAM as well. 4.3.3 Carpool Alternatives 4.3.4 Mode Choice Algorithms 4.4 Data Validation and Calibration 4.4.1 ActivitySim Path Variable Validation [graphs that compare asim, utah statewide, wfrc, and nchrp] 4.4.2 Mode Choice Calibration 4.5 Path, Person, and Location Analysis 4.6 Summary "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
