hbw_graph
hbs_graph
hbo_graph
hbw_graph
hbo_graph
knitr::include_graphics("pics/mmos.png")
knitr::include_graphics("pics/mmos_mode.png")
knitr::include_graphics("pics/asim-beam-compare.png")
hbs_graph
library(targets)
library(tarchetypes)
# Set target-specific options such as packages.
tar_option_set(packages = c("tidyverse", "bookdown", "sf", "cowplot", "ggspatial",
"DiagrammeR", "RAM", "readr", "tufte", "dotwhisker",
"ggpbr", "scales"))
source("R/map_maker.R")
# Targets necessary to build your data and run your model
method_targets <- list(
tar_target(tazmap, make_taz_map())
)
tar_make()
tar_make()
tar_read(tazmap)
knitr::kable(personatt, caption = 'A Subset of the Person Attributes File', booktabs = TRUE)
source("R/table_maker.R")
source("R/map_maker.R")
tar_make()
tar_make()
tar_make()
source("R/map_maker.R")
tar_make()
tar_read(tpcmflow)
tar_read(lccmflow)
tar_read(mnlflow)
tar_read(smallnet)
tar_read(bignet)
tar_make()
tar_read(bignetpic)
tar_make()
tar_make()
tar_read(venn)
BEAM <- c("Car", "Bike","Walk", "Ride Hail", "Ride Hail- \n Pooled", "Drive Transit", "Walk Transit", "Ride Hail- \n Transit", "Bike Transit")
ActivitySim <- c("Car","HOV2","HOV3", "Bike", "Walk", "Walk Transit", "Drive Transit", "Bike Transit")
group.venn(list(BEAM=BEAM, ActivitySim=ActivitySim), label=TRUE,
fill = c("lightblue", "pink"),
cat.pos = c(-25, 15),
lab.cex=1.1)
library(DiagrammeR)
library(RAM)
tar_read(venn)
source("R/map_maker.R")
tar_make()
tar_make()
tar_read(venn)
BEAM <- c("Car", "Bike","Walk", "Ride Hail", "Ride Hail- \n Pooled", "Drive Transit", "Walk Transit", "Ride Hail- \n Transit", "Bike Transit")
BEAM <- c("Car", "Bike","Walk", "Ride Hail", "Ride Hail- \n Pooled", "Drive Transit", "Walk Transit", "Ride Hail- \n Transit", "Bike Transit")
ActivitySim <- c("Car","HOV2","HOV3", "Bike", "Walk", "Walk Transit", "Drive Transit", "Bike Transit")
group.venn(list(BEAM=BEAM, ActivitySim=ActivitySim), label=TRUE,
fill = c("lightblue", "pink"),
cat.pos = c(-25, 15),
lab.cex=1.1)
install_url("https://cran.r-project.org/src/contrib/Archive/RAM/RAM_1.2.1.tar.gz")
devtools::install_url("https://cran.r-project.org/src/contrib/Archive/RAM/RAM_1.2.1.tar.gz")
group.venn(list(BEAM=BEAM, ActivitySim=ActivitySim), label=TRUE,
fill = c("lightblue", "pink"),
cat.pos = c(-25, 15),
lab.cex=1.1)
tar_read(lccmflow)
tar_make()
tar_make()
tar_make()
tar_read(hbw_graph)
tar_make()
tar_read(hbs_graph)
tar-read(hbo_graph)
tar_read(hbo_graph)
install.packages("rticles")
install.packages("bookmark")
update.packages(ask=FALSE,checkBuilt=TRUE)
tinytex::tlmgr_update()
update.packages(ask=FALSE,checkBuilt=TRUE)
options(tinytex.verbose = TRUE)
xelatex test
events_raw <- "data/events/12.events-15pct-wRH-all-all.csv"
# functions ---------------------------------------------------------------------#
read_events <- function(events_raw, cols){
events <- events_raw %>%
fread(select=cols) %>% as.tibble() %>%
mutate(
travelTime = arrivalTime - departureTime,
avgSpeed = length / travelTime,
vehicleType = ifelse(
grepl("ride",vehicle),"ride_hail",vehicleType)
) %>%
{data.table::as.data.table(.)[order(person,time)]} %>%
as_tibble()
events
}
events1 <- read_events(events_raw,cols)
library(tidyverse)
events1 <- read_events(events_raw,cols)
library(data.table)
library(scales)
events1 <- read_events(events_raw,cols)
data_targets <- tar_plan(
## Ride Hail Event Handler data
tar_target(all_all_wrh, "data/events/12.events-15pct-wRH-all-all.csv", format = "file"),
tar_target(all_path_wrh, "data/events/12.events-15pct-wRH-all-path.csv", format = "file"),
tar_target(rh_all_wrh, "data/events/12.events-15pct-wRH-rh-all.csv", format = "file"),
tar_target(rh_path_wrh, "data/events/12.events-15pct-wRH-rh-path.csv", format = "file"),
tar_target(none_wrh, "data/events/12.events-15pct-wRH-none.csv", format = "file"),
tar_target(all_all_norh, "data/events/all_all_norh.csv", format = "file"),
tar_target(all_path_norh, "data/events/all_path_norh.csv", format = "file"),
tar_target(rh_all_norh, "data/events/rh_all_norh.csv", format = "file"),
tar_target(rh_path_norh, "data/events/rh_path_norh.csv", format = "file"),
tar_target(none_norh, "data/events/none_norh.csv", format = "file"),
## Scenario List
scenario_list = list(
"All Modes - All Variables - W/ RH" = all_all_wrh,
"All Modes - Path Variables - W/ RH" = all_path_wrh,
"RH Modes - All Variables - W/ RH" = rh_all_wrh,
"RH Modes - Path Variables - W/ RH" = rh_path_wrh,
"No Modes - W/ RH" = none_wrh,
"All Modes - All Variables - No RH" = all_all_norh,
"All Modes - Path Variables - No RH" = all_path_norh,
"RH Modes - All Variables - No RH" = rh_all_norh,
"RH Modes - Path Variables - No RH" = rh_path_norh,
"No Modes - No RH" = none_norh
),
## Important Columns
cols = c("person",
"vehicle",
"time",
"type",
"mode",
"legMode",
"vehicleType",
"arrivalTime",
"departureTime",
"departTime",
"length",
"numPassengers",
"actType",
"personalVehicleAvailable"
),
events_list = future_map(scenario_list, read_events, cols)
)
cols = c("person",
"vehicle",
"time",
"type",
"mode",
"legMode",
"vehicleType",
"arrivalTime",
"departureTime",
"departTime",
"length",
"numPassengers",
"actType",
"personalVehicleAvailable"
)
events1 <- read_events(events_raw,cols)
# mode choice
mode_choice <- function(events){
events %>%
filter(type == "ModeChoice") %>%
group_by(mode) %>%
summarize(n = n())
}
# trip arrivals
trip_arrivals <- function(events){
events %>%
filter(type == "TripArrivalEvent") %>%
group_by(mode) %>%
summarize(n = n())
}
# rh passengers
rh_pass <- function(events){
rhPassengers <- events %>%
filter(type == "PathTraversal",
vehicleType == "ride_hail") %>%
select(numPassengers) %>%
table() %>% as_tibble() %>%
`colnames<-`(c("numPassengers", "n"))
rhPassengers
}
#' rh wait and replanning times
rh_times <- function(events){
times <- events %>%
arrange(person, time) %>%
mutate(
rhReserveTime = ifelse(
type == "ReserveRideHail" & person == lead(person),
lead(time) - time,
NA
),
rhReserveOutcome = ifelse(
type == "ReserveRideHail" & person == lead(person),
lead(type),
NA
)
) %>%
filter(!is.na(rhReserveTime)) %>%
group_by(rhReserveOutcome)
times %>%
summarise(mean = mean(rhReserveTime) / 60,
q25 = quantile(rhReserveTime,c(.25)) / 60,
q50 = quantile(rhReserveTime,c(.5)) / 60,
q75 = quantile(rhReserveTime,c(.75)) / 60)%>%
pivot_longer(!rhReserveOutcome, names_to = "summary", values_to = "values") %>%
select(-rhReserveOutcome)
}
#' rh travel times
rh_travel_times <- function(events){
times <- events %>%
filter(!is.na(travelTime),
type == "PathTraversal",
str_detect(vehicle, "rideHail")) %>%
mutate(travelTime = (travelTime) / 60,
variable = "travelTime") %>%
group_by(variable)
times %>%
summarise(mean = mean(travelTime),
q25 = quantile(travelTime,c(.25)),
q50 = quantile(travelTime,c(.5)),
q75 = quantile(travelTime,c(.75))) %>%
pivot_longer(!variable, names_to = "summary", values_to = "values") %>%
select(-variable)
}
#' count transfers to/from transit and rh
count_rh_transit_transfers <- function(events){
transfer_rht <- events %>%
filter(
type %in% c("PersonEntersVehicle",
"PersonLeavesVehicle"),
str_detect(vehicle, "rideHail") | str_detect(vehicle, "gtfs")
) %>%
arrange(person, time) %>%
select(person:type) %>%
filter(type == "PersonLeavesVehicle" & lead(type) == "PersonEntersVehicle",
str_detect(vehicle, "rideHail") & str_detect(lead(vehicle), "gtfs"),
person == lead(person)) %>%
mutate(transferType = "rideHail-transit")
transfer_trh <- events %>%
filter(
type %in% c("PersonEntersVehicle",
"PersonLeavesVehicle"),
str_detect(vehicle, "rideHail") | str_detect(vehicle, "gtfs")
) %>%
arrange(person, time) %>%
select(person:type) %>%
filter(lag(type) == "PersonLeavesVehicle" & type == "PersonEntersVehicle",
str_detect(lag(vehicle), "gtfs") & str_detect(vehicle, "rideHail"),
person == lag(person)) %>%
mutate(transferType = "transit-rideHail")
bind_rows(transfer_rht,transfer_trh) %>%
group_by(transferType) %>%
summarize(n = n())
}
mc1 <- mode_choice(events1)
ta1 <- trip_arrivals(events1)
rhpass1 <- rh_pass(events1)
rhtimes1 <- rh_times(events1)
rhtimes2 <- rh_travel_times(events1)
rht_transfer1 <- count_rh_transit_transfers(events1) # why 0?
View(rhtimes1)
#' rh wait and replanning times
rh_times <- function(events){
times <- events %>%
arrange(person, time) %>%
mutate(
rhReserveTime = ifelse(
type == "ReserveRideHail" & person == lead(person),
lead(time) - time,
NA
),
rhReserveOutcome = ifelse(
type == "ReserveRideHail" & person == lead(person),
lead(type),
NA
)
) %>%
filter(!is.na(rhReserveTime)) %>%
group_by(rhReserveOutcome)
#times %>%
#  summarise(mean = mean(rhReserveTime) / 60,
#           q25 = quantile(rhReserveTime,c(.25)) / 60,
#            q50 = quantile(rhReserveTime,c(.5)) / 60,
#            q75 = quantile(rhReserveTime,c(.75)) / 60)%>%
#  pivot_longer(!rhReserveOutcome, names_to = "summary", values_to = "values") %>%
#  select(-rhReserveOutcome)
}
rhtimes1 <- rh_times(events1)
View(rhtimes1)
times %>%
summarise(mean = mean(rhReserveTime) / 60)
#' rh wait and replanning times
rh_times <- function(events){
times <- events %>%
arrange(person, time) %>%
mutate(
rhReserveTime = ifelse(
type == "ReserveRideHail" & person == lead(person),
lead(time) - time,
NA
),
rhReserveOutcome = ifelse(
type == "ReserveRideHail" & person == lead(person),
lead(type),
NA
)
) %>%
filter(!is.na(rhReserveTime)) %>%
group_by(rhReserveOutcome)
times %>%
summarise(mean = mean(rhReserveTime) / 60)
#           q25 = quantile(rhReserveTime,c(.25)) / 60,
#            q50 = quantile(rhReserveTime,c(.5)) / 60,
#            q75 = quantile(rhReserveTime,c(.75)) / 60)%>%
#  pivot_longer(!rhReserveOutcome, names_to = "summary", values_to = "values") %>%
#  select(-rhReserveOutcome)
}
rhtimes1 <- rh_times(events1)
View(rhtimes1)
tar_make()
# target libraries
library(targets)
library(tarchetypes)
library(future)
library(future.apply)
library(furrr)
library(tidyverse)
library(data.table)
library(scales)
tar_make()
tar_make()
tar_make()
times <- events %>%
arrange(person, time) %>%
mutate(
rhReserveTime = ifelse(
type == "ReserveRideHail" & person == lead(person),
lead(time) - time,
NA
),
rhReserveOutcome = ifelse(
type == "ReserveRideHail" & person == lead(person),
lead(type),
NA
)
) %>%
filter(!is.na(rhReserveTime)) %>%
group_by(rhReserveOutcome)
#' rh wait and replanning times
rh_times <- function(events){
times <- events %>%
arrange(person, time) %>%
mutate(
rhReserveTime = ifelse(
type == "ReserveRideHail" & person == lead(person),
lead(time) - time,
NA
),
rhReserveOutcome = ifelse(
type == "ReserveRideHail" & person == lead(person),
lead(type),
NA
)
) %>%
filter(!is.na(rhReserveTime)) %>%
group_by(rhReserveOutcome)
}
#rhpass1 <- rh_pass(events1)
rhtimes1 <- rh_times(events1)
View(rhtimes1)
tar_make()
mct <- tar_read(wit_times)
mct <- tar_read(wait_times)
View(mct)
tar_make()
# target libraries
library(targets)
library(tarchetypes)
library(future)
library(future.apply)
library(furrr)
library(tidyverse)
library(data.table)
library(scales)
tar_make()
tar_make()
mct <- tar_read(wait_times)
View(mct)
mct <- tar_read(mode_choice_table)
resut_modes <- tar_read(mode_choice_table)
resut_modes <- tar_read(num_passengers)
resut_pass <- tar_read(num_passengers)
result_pass <- tar_read(num_passengers)
result_modes <- tar_read(mode_choice_table)
result_wait <- tar_read(wait_times)
result_travel <- tar_read(travel_times)
result_transfer <- tar_read(rh_to_transit)
View(result_modes)
View(result_pass)
View(result_transfer)
View(result_travel)
View(result_wait)
View(result_modes)
View(result_pass)
View(result_transfer)
View(result_travel)
View(result_wait)
BEAM <- c("Car", "Bike","Walk", "Ride Hail", "Ride Hail- \n Pooled", "Drive Transit", "Walk Transit", "Ride Hail- \n Transit", "Bike Transit")
ActivitySim <- c("Car","HOV2","HOV3", "Bike", "Walk", "Walk Transit", "Drive Transit", "Bike Transit")
group.venn(list(BEAM=BEAM, ActivitySim=ActivitySim), label=TRUE,
fill = c("lightblue", "pink"),
cat.pos = c(-25, 15),
lab.cex=1.1)
library(RAM)
group.venn(list(BEAM=BEAM, ActivitySim=ActivitySim), label=TRUE,
fill = c("lightblue", "pink"),
cat.pos = c(-25, 15),
lab.cex=1.1)
ActivitySim <- c("Car","HOV2","HOV3", "Bike", "Walk", "Walk Transit", "Drive Transit", "Ride Hail", "Ride Hail Pooled","Bike Transit")
group.venn(list(BEAM=BEAM, ActivitySim=ActivitySim), label=TRUE,
fill = c("lightblue", "pink"),
cat.pos = c(-25, 15),
lab.cex=1.1)
ActivitySim <- c("Car","HOV2","HOV3", "Bike", "Walk", "Walk Transit", "Drive Transit", "Ride Hail", "Ride Hail- \n Pooled","Bike Transit")
group.venn(list(BEAM=BEAM, ActivitySim=ActivitySim), label=TRUE,
fill = c("lightblue", "pink"),
cat.pos = c(-25, 15),
lab.cex=1.1)
tar_make()
tar_make()
tar_make()
tar_make()
tar_make()
tar_make()
tar_make()
knitr::include_graphics("pics/BeamCalib.png")
inputTable <- matrix(input,ncol=5,byrow=TRUE) %>%
as.tibble() %>%
rename("Scenario Number" = V1, "Scenario Name" = V2, "ActivitySim Input Type" = V3, "BEAM Utility Variables" = V4, "Scenario Description" = V5")
knitr::kable(
head(mtcars[, 1:2], 2), booktabs = TRUE,
caption = 'Test table 1.'
)
# Scenario Number, Scenario Name, ActivitySim Input Type, BEAM Utility Function Variables, Scenario Description
input <- c(1, "None", "With RH","Path, Person, Location","Mode Choice Off",
# Scenario Number, Scenario Name, ActivitySim Input Type, BEAM Utility Function Variables, Scenario Description
input <- c("1", "None", "With RH","Path, Person, Location","Mode Choice Off",
"2", "All-ALL-wRH", "With RH", "Path, Person, Location", "All variables used",
"3", "All-All-wRH", "With Ride Hail","Path", "just path variables used")
inputTable <- matrix(input,ncol=5,byrow=TRUE) %>%
as.tibble() %>%
rename("Scenario Number" = V1, "Scenario Name" = V2, "ActivitySim Input Type" = V3, "BEAM Utility Variables" = V4, "Scenario Description" = V5")
knitr::kable(
head(mtcars[, 1:2], 2), booktabs = TRUE,
caption = 'Test table 1.'
)
inputTable <- matrix(input,ncol=5,byrow=TRUE) %>%
as.tibble() %>%
rename("Scenario Number" == V1, "Scenario Name" == V2, "ActivitySim Input Type" == V3, "BEAM Utility Variables" == V4, "Scenario Description" == V5)
inputTable <- matrix(input,ncol=5,byrow=TRUE) %>%
as.tibble() %>%
rename("Scenario Number" = V1, "Scenario Name" = V2, "ActivitySim Input Type" = V3, "BEAM Utility Variables" = V4, "Scenario Description" = V5)
View(inputTable)
install.packages("kableExtra")
install.packages("kableExtra")
knitr::kable(inputTable, caption = 'ActivitySim - BEAM Mode Choice Combination Scenario Description', booktabs = TRUE) %>%
kableExtra::kable_styling(full_width = TRUE)
kableExtra::kbl(inputTable, caption = 'ActivitySim - BEAM Mode Choice Combination Scenario Description', booktabs = TRUE) %>%
kableExtra::kable_styling(full_width = TRUE)
devtools::install_github("haozhu233/kableExtra"
devtools::install_github("haozhu233/kableExtra")
rs.restartR()
.rs.restartR()
# target libraries
library(targets)
library(tarchetypes)
tar_make()
# target libraries
library(targets)
# target libraries
library(targets)
install.packages(c("bookdown", "broom", "car", "classInt", "cli", "datawizard", "DBI", "dbplyr", "deSolve", "devtools", "dfidx", "dplyr", "e1071", "fansi", "farver", "fda", "fields", "FNN", "fontawesome", "furrr", "generics", "geojsonsf", "geometry", "gert", "ggspatial", "globals", "googlesheets4", "gtools", "haven", "Hmisc", "htmlTable", "htmltools", "httr", "igraph", "insight", "kernlab", "latticeExtra", "lme4", "locfit", "magrittr", "MASS", "mnormt", "nlme", "nloptr", "parameters", "pcaPP", "phangorn", "pkgload", "prettymapr", "processx", "proxy", "ps", "quantreg", "R.methodsS3", "R.oo", "R.utils", "raster", "rbibutils", "Rcpp", "RCurl", "Rdpack", "readxl", "reprex", "rlang", "rmarkdown", "rosm", "roxygen2", "s2", "sf", "shiny", "sp", "spam", "stars", "statmod", "stringi", "survival", "tarchetypes", "targets", "terra", "tibble", "tidyverse", "tinytex", "tweenr", "tzdb", "usethis", "V8", "vctrs", "xfun", "XML"))
# target libraries
library(targets)
library(tarchetypes)
tar_make()
library(tidyverse)
install.ppackages("scales")
install.packages("scales")
install.packages("scales")
install.packages("tidyverse")
install.packages("cli")
install.packages("cli")
install.packages("bookdown")
install.packages("RAM")
install.packages("DiagrammeR")
tar_make()
# target libraries
library(targets)
library(tarchetypes)
tar_make()
tar_make()
install.packages(c("tidyverse", "readr", "dotwhisker", "scales", "future", "future.apply", "furrr",
"data.table"))
install.packages(c("dotwhisker", "future", "future.apply", "furrr"))
tar_make()
